module statix/templates

language cpp20

test templated in and output type [[
template<class T>
T testfun(float a, T b) {
	return b;
}

int main(int argc, char** argv) {
	return testfun<int>(1.5f, 55);
}
]] analysis succeeds

test incorrect return type [[
template<class T>
T testfun(char* a, T b) {
	return a;
}

int main(int argc, char** argv) {
	return testfun<int>("hello", 5);
}
]] analysis fails

test correct return type [[
template<class T>
T testfun(char* a, T b) {
	return a;
}

int main(int argc, char** argv) {
	return (int)(testfun<char*>("hello", "world"));
}
]] analysis succeeds

test variable of template type [[
template<class T>
T get_value(T* input) {
  T value = *input;
  return value;
}

int main(int argc, char** argv) {
	int value = 5;
	int* pointer = get_value<int*>(&(&value));
	return get_value<int>(&value);
}
]] analysis succeeds

test variable of pointer to template type [[
template<class T>
T get_value(T* input) {
  T* value = input;
  return *value;
}

int main(int argc, char** argv) {
	int value = 5;
	int* pointer = get_value<int*>(&(&value));
	return get_value<int>(&value);
}
]] analysis succeeds

test incorrect assignment [[
template<class T>
T get_value(T* input) {
  int* value = input;
  return *value;
}

int main(int argc, char** argv) {
	int value = 5;
	int* pointer = get_value<int*>(&(&value));
	return get_value<int>(&value);
}
]] analysis fails

test concept [[
template <class T, class U>
concept AConcept = requires (T x, U y) { x + x; y.value + 1; };

template <class T, class U, class V>
requires AConcept<U, V>
V get_a_value(V valuehaver) {
  return valuehaver;
}

struct AType { int value; };

int main() {
  struct AType aVariable;
  aVariable.value = 5000;
  
  return get_a_value<char*, int, struct AType>(aVariable).value;
}
]] analysis succeeds

test unfullfilled concept [[
template <class T, class U>
concept AConcept = requires (T x, U y) { x + x; y.value + 1; };

template <class T, class U, class V>
requires AConcept<U, V>
V get_a_value(V valuehaver) {
  return valuehaver;
}

struct AType { int value; };

int main() {
  struct AType aVariable;
  aVariable.value = 5000;
  
  return [[get_a_value<char*, int, int>(5)]];
}
]] 2 errors at #1, #1

test multilevel concept [[
template <class T>
concept Layer1 = requires(T x) { *x; x + 5; };

template <class T, class U>
concept Layer2 = Layer1<T> && Layer1<U>;

template <class T, class V>
requires Layer2<T, V>
void do_nothing() {

}

int main() {
  do_nothing<int*, char*>();
}
]] analysis succeeds

test multilevel concept, bad type [[
template <class T>
concept Layer1 = requires(T x) { *x; x + 5; };

template <class T, class U>
concept Layer2 = Layer1<T> && Layer1<U>;

template <class T, class V>
requires Layer2<T, V>
void do_nothing() {

}

int main() {
  [[do_nothing<int, char*>()]];
}
]] 1 error at #1