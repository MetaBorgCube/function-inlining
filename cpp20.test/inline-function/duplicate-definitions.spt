module inline-function/duplicate-definitions

language cpp20

/*
Tests that duplicate definitions are rejected
*/

test rename duplicate definition when both are used 1 [[
int y = 5;

int foo(int x) {
    return x + y;
}

int main() {
    int x = 5;
    [[foo(2)]];
    x = 6;
}
]] run inline-function-test-2(|#1) to [[
int y = 5;

int foo(int x)
{
  return x + y;
}

int main( )
{
  int x = 5;
  int x_0 = 2;
  x_0 + y;
  x = 6;
}
]]

test rename duplicate definition when both are used 2 [[
int increment(int x) {
    return x + 1;
}

int main() {
    int x = 5;
    [[increment(2)]];
    x = 6;
}
]] run inline-function-test-2(|#1) to [[
int increment(int x)
{
  return x + 1;
}

int main( )
{
  int x = 5;
  int x_0 = 2;
  x_0 + 1;
  x = 6;
}
]]

test rename duplicate definition when original definition is unused [[
int increment(int x) {
    return x + 1;
}

int main() {
    int x = 5;
    [[increment(2)]];
}
]] run inline-function-test-2(|#1) to [[
int increment(int x)
{
  return x + 1;
}

int main( )
{
  int x = 5;
  int x_0 = 2;
  x_0 + 1;
}
]]

test rename duplicate definition when inlined definition is unused (parameter) [[
int increment(int x) {
    return 1;
}

int main() {
    int x = 5;
    [[increment(2)]];
    x = 2;
}
]] run inline-function-test-2(|#1) to [[
int increment(int x)
{
  return 1;
}

int main( )
{
  int x = 5;
  int x_0 = 2;
  1;
  x = 2;
}
]]

test rename duplicate definition when inlined definition is unused (explicit definition) [[
int increment() {
    int x;
    return 1;
}

int main() {
    int x = 5;
    [[increment()]];
    x = 2;
}
]] run inline-function-test-2(|#1) to [[
int increment()
{
  int x;
  return 1;
}

int main( )
{
  int x = 5;
  int x_0;
  1;
  x = 2;
}
]]

test rename duplicate definition when both are unused (parameter) [[
int increment(int x) {
    return 1;
}

int main() {
    int x = 5;
    [[increment(2)]];
}
]] run inline-function-test-2(|#1) to [[
int increment(int x)
{
  return 1;
}

int main( )
{
  int x = 5;
  int x_0 = 2;
  1;
}
]]

test rename duplicate definition when both are unused (explicit definition) [[
int increment() {
	int x;
    return 1;
}

int main() {
    int x = 5;
    [[increment()]];
}
]] run inline-function-test-2(|#1) to [[
int increment()
{
  int x;
  return 1;
}

int main( )
{
  int x = 5;
  int x_0;
  1;
}
]]