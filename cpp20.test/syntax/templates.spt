module syntax/templates

language cpp20

test basic template [[
template<class T>
T addition(T a, T b) {
	return a + b;
}
]] parse succeeds

test simple concept [[
template <class T>
concept Always = true;
]] parse succeeds

test several concepts [[
template<typename T>
	char get_value() { return 'o'; }

template<typename T>
	requires (sizeof(T) > 1) && (get_value<T>())
void f(T) {}
void f(int);


]] parse succeeds

test requires statement [[
template <class T> requires requires (T x) { x + x; } && true
void func(T x) {
  x + x;
}

template <class U>
concept ByteSized = sizeof(U) == 1 || requires(U x) { (char)x; };

]] parse succeeds