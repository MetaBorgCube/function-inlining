module inline-function-tiger

imports
  pp
  analysis
  injections/Tiger-injections
  inline-function-source

rules
  inline-function-test(|selected-term): ast -> <inline-function(ls-extract-data, ls-make-decs,
    ls-fix-control-flow, ls-is-return, ls-construct-block, ls-is-exp-language, ls-is-statement,
    ls-insert-before, ls-remove-exp, ls-fix-semantic-errors, editor-analyze, multi
    |<new-iset>)> (selected-term, ast)

  // At the time of writing, construct-textual-change doesn't work because of issues with 
  // origin tracking. In case it is fixed, replace pp-debug with construct-textual-change.
  inline-function-menu-action = inline-function-action(pp-debug, ls-extract-data, ls-make-decs,
    ls-fix-control-flow, ls-is-return, ls-construct-block, ls-is-exp-language, ls-is-statement,
    ls-insert-before, ls-remove-exp, ls-fix-semantic-errors, editor-analyze, multi
    | "inlined.tig")
   
  
  // Change to "id" to enable- and "fail" to disable multi-file mode.
//  multi = id
  multi = fail
  
  // Match on function call terms, returning the full term, name and arguments. 
  ls-extract-data(|()): t -> (t, name, args)
    where
      <?Call(name, args)> t
  // Match on function definition terms, returning the parameters, body and type.
  ls-extract-data(|name): FunDec(name, params, type, body) -> (params, body, type)
  ls-extract-data(|name): ProcDec(name, params, body) -> (params, body, ())
  
  // Turn parameter definitions and arguments into variable definitions.
  ls-make-decs: (params, args) -> decs
    where
      decs := <zip(\ (FArg(name, type), value) -> VarDec(name, type, value) \)> (params, args)
  
  // There is no return statement in Tiger, so we don't do anything here.
  ls-fix-control-flow(|_): body -> (body, ())
  
  // There is no return statement in Tiger so a return match should always fail.
  ls-is-return = fail
  
  // Combine the body expression and variable definitions into a "Let" term.
  ls-construct-block: (body, []) -> body
  ls-construct-block: (body, params) -> Let(params, [body])
  
  // Indicate that this is an expression language.
  ls-is-exp-language = id
  
  // The three language-specific strategies below are only required for a statement language.
  ls-is-statement = fail
  ls-insert-before = fail
  ls-remove-exp = fail
  
  // We don't know of any semantic errors in Tiger that we can fix here.
  ls-fix-semantic-errors = fail

  
  