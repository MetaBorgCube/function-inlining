module analysis/statements

imports
  signatures/c-syntax-sig
  
  analysis/declarations
  analysis/expressions
  analysis/types
  analysis/namespaces

rules
  compStmtOk : scope * CompoundStatement
  compStmtOk(s, Compound(blockItems)) :- {s_block s_last}
    new s_block,
    s_block -P-> s,
    s -F-> s_last,
    blockItemsOk(s_block, blockItems) == s_last.
  
  stmtOk : scope * Statement
  stmtOk(s, Label(id, stmt)) :-
    declareLabel(s, id),
    stmtOk(s, stmt).
  stmtOk(_, Case(_, _)) :-
    false | error "'case' statement not in switch statement".
  stmtOk(_, Default(_)) :-
    false | error "'default' statement not in switch statement".
  stmtOk(s, Exp(e)) :- {T}
    typeOfExp(s, e) == T.
//  try { T == VOID() } | warning $[Expression result of type [T] discarded]. // Clutters assignments
  stmtOk(s, If(e, then)) :- {T}
    typeOfExp(s, e) == T,
    scalarType(T),
    stmtOk(s, then).
  stmtOk(s, IfElse(e, then, else)) :- {T}
    typeOfExp(s, e) == T,
    scalarType(T),
    stmtOk(s, then),
    stmtOk(s, else).
  stmtOk(s, Switch(e, case)) :- {T}
    typeOfExp(s, e) == T,
    intType(T) | error $[statement requires expression of integer type ('[T]' invalid)] @e, // switch should have int type
    switchCaseOk(s, T, Statement2BlockItem(case)).
  stmtOk(s, Switch(e, CompoundStatement2Statement(Compound(cases)))) :- {T}
    typeOfExp(s, e) == T,
    intType(T) | error $[statement requires expression of integer type ('[T]' invalid)] @e, // switch should have int type
    switchCasesOk(s, T, cases).
  stmtOk(s, DoWhile(body, e)) :-
    typeOfExp(s, e) == _,
    stmtOk(s, body).
  stmtOk(s, For(init, e1_opt, e2_opt, body)) :- {s_for x}
    new s_for,
    s_for -P-> s,
    s -F-> s_for,
    initClauseOk(s_for, init),
    typeOfExpOpt(s_for, e1_opt) == x,
    scalarType(x),
    typeOfExpOpt(s_for, e2_opt) == _,
    stmtOk(s_for, body).
  stmtOk(s, ForEach(init_opt, specs, decl, e, body)) :- {s_for Ti Tv}
    new s_for,
    s_for -P-> s,
    s -F-> s_for,
    initClauseOptOk(s_for, init_opt),
    typeOfExp(s, e) == Ti,
    declSpecsToType(s, specs) == Tv,
    uniDeclOk(s_for, Tv, Declarator2InitDeclarator(decl)) == _,
    iterationOk(s, Tv, e, Ti),
    stmtOk(s_for, body).

  iterationOk : scope * TYPE * Exp * TYPE
  iterationOk(s, Tv, ei, POINTER(T)) :- // TODO: make an array type
    lub(Tv, T) == Tv | error $[Type [T] is incompatible with variable of type [Tv]]@ei.
  iterationOk(s, Tv, ei, c@CLASS(_, _, _, _, _, _, _)) :- {Tb Te}
    typeOfClassMem(s, c, "begin") == FUN([], Tb),// | error $[Missing begin method]@ei,
    typeOfClassMem(s, c,   "end") == FUN([], Te),// | error $[Missing end method]  @ei,
    lub(Tv, Tb) == Tv | error $[begin method returns incompatible type [Tb]]@ei,
    lub(Tv, Te) == Tv | error $[begin method returns incompatible type [Te]]@ei.
  iterationOk(s, Tv, ei, T) :- {Tb Te Tbf Tef}
    typeOfVar(s, NamespaceID([], "begin")) == Tbf@FUN(_, Tb), // | error $[Missing begin function],
    funArgsOk(Tbf, [T]),
    typeOfVar(s, NamespaceID([], "end")) == Tef@FUN(_, Te),// | error $[Missing end function]@ei,
    funArgsOk(Tef, [T]),
    lub(Tv, Tb) == Tv | error $[begin function returns incompatible type [Tb]]@ei,
    lub(Tv, Te) == Tv | error $[end function returns incompatible type [Te]]@ei.

  stmtOk(s, Goto(id)) :-
    resolveLabel(s, id).
  stmtOk(s, Return(Exp2Exp-OPT(e))) :- {T Tr}
    typeOfExp(s, e) == T,
    query Return
      filter (P | Q)* and { x :- true }
        min $ < P and true
          in s |-> [(_, (Tr))],
    returnTypeOk(T, Tr).
  stmtOk(s, Return(NoExp())) :- { Tr }
    query Return
      filter (P | Q)* and { x :- true }
        min $ < P and true
          in s |-> [(_, (Tr))],
    returnVoidOk(Tr).
  
  returnTypeOk : TYPE * TYPE
  returnTypeOk(T, VOID()) :-
    false | error $[void function 'x' should not return a value (of type [T])].
  returnTypeOk(T, Tr) :-
    lub(T, Tr) == Tr | error $[Invalid return type [T] for function returning [Tr]].
  returnTypeOk(TEMPLATEPLACEHOLDER(), _).
  returnTypeOk(_, TEMPLATEPLACEHOLDER()).
  returnTypeOk(TEMPLATEPLACEHOLDER(), AUTO(Tr)) :-
    Tr == TEMPLATEPLACEHOLDER().
  
  returnVoidOk : TYPE
  returnVoidOk(T) :-
    false | error "non-void function 'x' should return a value".
  returnVoidOk(VOID()).
  returnVoidOk(AUTO(T)) :-
    T == VOID() | error "non-void function 'x' should return a value".

  stmtOk(s, CompoundStatement2Statement(compStmt)) :-
    compStmtOk(s, compStmt).
  stmtOk(_, Break()). // TODO: check if in control flow

  stmtOk(s, Nop()).

  blockItemOk : scope * BlockItem -> scope
  blockItemsOk : scope * list(BlockItem) -> scope

  blockItemOk(s, Declaration2BlockItem(decl)) = s_new :-
    new s_new,
    s_new-Q->s,
    declOk(s_new, decl).
  blockItemOk(s, UsingDeclaration2BlockItem(decl)) = s_new :-
    usingDeclOk(s, decl) == s_new.
  blockItemOk(s, Statement2BlockItem(stmt)) = s_new :-
    new s_new,
    s_new-Q->s,
    stmtOk(s_new, stmt).
  
  blockItemsOk(s, [h|l]) = s_last :- {s_new}
    blockItemOk(s, h) == s_new,
    blockItemsOk(s_new, l) == s_last.
  blockItemsOk(s, []) = s.

  switchCaseOk : scope * TYPE * BlockItem
  switchCasesOk maps switchCaseOk(*, *, list(*))
  switchCaseOk(s, T, Statement2BlockItem(Case(Exp2ConstExp(e), stmt))) :- {Te} // Check if const matches switch type
    stmtOk(s, stmt),
    typeOfExp(s, e) == Te,
    lub(T, Te) == T.
  switchCaseOk(s, _, Statement2BlockItem(Default(stmt))) :-
    stmtOk(s, stmt).
  switchCaseOk(s, _, bi) :- 
    blockItemOk(s, bi) == _.
  