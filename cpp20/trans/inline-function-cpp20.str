module inline-function-cpp20

imports
  analysis
  pp
  injections/c-syntax-injections
  inline-function-source
  inline-function-name-fix

rules
  inline-function-test(|selected-term): ast -> <inline-function(ls-extract-data, ls-make-decs,
    ls-fix-control-flow, ls-is-return, ls-construct-block, ls-is-exp-language, ls-is-statement,
    ls-insert-before, ls-remove-exp, ls-fix-semantic-errors, editor-analyze, multi
    |<new-iset>)> (selected-term, ast)

  inline-function-menu-action = inline-function-action(pp-debug, ls-extract-data, ls-make-decs,
    ls-fix-control-flow, ls-is-return, ls-construct-block, ls-is-exp-language, ls-is-statement,
    ls-insert-before, ls-remove-exp, ls-fix-semantic-errors, editor-analyze, multi
    | "inlined.cpp")
   
    // At the time of writing, construct-textual-change doesn't work because of issues with origin tracking.
    // In case it is fixed, the definition below can be uncommented to replace the definition above.
//  inline-function-menu-action-2 = inline-function-action(construct-textual-change, ls-extract-data, ls-make-decs,
//    ls-fix-control-flow, ls-is-return, ls-construct-block, ls-is-exp-language, ls-is-statement,
//    ls-insert-before, ls-remove-exp, ls-fix-semantic-errors, editor-analyze, multi
//    | "inlined.cpp")
  
  // Change to "id" to enable- and "fail" to disable multi-file mode.
//  multi = id
  multi = fail
  
  ls-extract-data(|()): t -> (t, name, args)
    where
      <?Call(Var(NamespaceID(_, name)), args)> t
  ls-extract-data(|()): t -> (t, name, args) 
    where
      <?Call(Proj(_, name), args)> t
  ls-extract-data(|name): FunDef(type, Declarator(_, FunDeclTyped(IdDecl(name), ParamList(params))), _, body) 
    -> (params, body, type)
    
  ls-make-decs: (params, args) -> decs
    where
      decs := <zip(\ (ParamDecl1(type, name), value) 
                      -> Decl(type, [InitDecl(name, value)]) \)>
                (params, args)
                   
  ls-fix-control-flow(|[Void()]): Compound(body) -> (body', ())
    where
      (body', Return(NoExp())) := <split-init-last> body
  ls-fix-control-flow(|[Void()]): Compound(body) -> (body, ())
  ls-fix-control-flow(|_): Compound(body) -> (body', return-exp)
    where
      (body', Return(return-exp)) := <split-init-last> body
  
  ls-is-return = ?Return(_)
  
  ls-construct-block: (body, params) -> (Compound(<concat> [params, body]))
  
  ls-is-exp-language = fail
  
  ls-is-statement = is-cpp20-BlockItem-or-inj
  
  ls-insert-before(|stmt, block): ast -> ast-t
    where
      ast-t := <oncetd(insert-before-helper(|stmt, block))> ast
  // We reject inlining functions in the condition of a loop construct.
  insert-before-helper(|For(_, _, _, _), _): _ -> ()
  insert-before-helper(|ForEach(_, _, _, _, _), _): _ -> ()
  insert-before-helper(|While(_, _), _): _ -> ()
  insert-before-helper(|DoWhile(_, _), _): _ -> ()
  // In case the function body is empty, nothing needs to be added in front of the statement.
  insert-before-helper(|stmt, Compound([])): stmt -> stmt
  // There are cases where the statement is a singular statement, so it is not part of a list.
  // In that case it should be turned into a Compound block when the other statements are added.
  insert-before-helper(|stmt, Compound(new-block)): stmt -> Compound(<conc> (new-block, [stmt]))
  // Else, the new statements should just be inserted in the list containing the specified stmt.
  insert-before-helper(|stmt, Compound(new-block)): t -> new-t
    where
        (before, after) := <split-fetch(?stmt)> t
      ; new-t := <conc> (before, new-block, [stmt], after)
  
  // In C++ the function call only needs to be removed for void functions.
  // Void functions can not be part of an expression, so they will always be standalone expression 
  // statements.
  // Therefore we just remove the statement containing the function call.
  ls-remove-exp(|exp): ast -> ast-t
    where
      ast-t := <oncetd(<conc> <split-fetch(?Exp(exp))>)> ast

  // other-asts equals [] unless multi-file mode is enabled and there are other programs in the project.
  // It is passed on in case the other files are needed to fix a semantic error.
  // If it is filled, it contains (ast, tuple) entries.
  ls-fix-semantic-errors(|analysis-errors, (old-ast, old-analysis), asts-analyses): new-ast -> fixed-ast
    where
        (duplicate-term, _) := <fetch-elem(where(Snd; string-ends-with(|"already defined")))> analysis-errors
      ; fixed-ast := <rename-duplicate-declaration> ((old-ast, old-analysis), asts-analyses, new-ast, duplicate-term)
      
      
      
      
      
      
      
      
      
      