module cpp-templates

imports
  c-lexical
  c-syntax
  namespaces

sorts TemplateDeclaration TemplateParameter TemplateConstraints RequiresClause

context-free syntax
TemplateDeclaration.TemplateFunDef =
  [template<[{TemplateParameter ", "}*]>[TemplateConstraints]
   [FunctionDefinition]]

TemplateDeclaration.TemplateConcept =
  [template<[{TemplateParameter ", "}*]>
   concept [TypeID] = [RequiresClause];]

TemplateParameter.ClassParameter1 =
  <class <TypeID>>

TemplateParameter.ClassParameter2 =
  <typename <TypeID>>

TemplateParameter.ValueParameter =
  <<TypeName> <ID>>

TemplateConstraints.Constraints = < requires <RequiresClause>>
TemplateConstraints.NoConstraints = <>

RequiresClause.RequiresExp = <requires (<ParameterTypeList>) <CompoundStatement>>
RequiresClause.RequiresNormalExp = <<Exp>>
RequiresClause.RequiresConcept = [[NamespaceTypeID]<[{TemplateValue ","}*]>]
RequiresClause.RequireDisjunction = <<RequiresClause> && <RequiresClause>> {left}
RequiresClause.RequireConjunction = <<RequiresClause> || <RequiresClause>> {left}

context-free priorities
  RequiresClause.RequiresNormalExp <0> .> { Exp.LAnd Exp.LOr }

template options
  tokenize: "<"
