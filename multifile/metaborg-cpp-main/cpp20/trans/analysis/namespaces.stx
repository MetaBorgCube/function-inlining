module analysis/namespaces

imports
  signatures/c-syntax-sig
  signatures/cpp-templates-sig
  analysis/declarations


rules
  namespaceOk : scope * NamespaceDeclaration -> scope
  
  namespaceOk(s, Namespace([], nsid, decls)) = s_withns :- { s_ns s_first s_others s_last ids }
    openNamespace(s, nsid, [], []) == (ids, [s_ns|s_others]),
    new s_first,
    s_first-Q->s_ns,
    s_first-P->s,
    extDeclListOk(s_first, decls) == s_last,
    new s_withns,
    s_withns-Q->s,
    declareNamespace(s_withns, ids, [s_last|s_others]).

  namespaceOk(s, Namespace([InlineModifier()], nsid, decls)) = s_withns :- { s_ns s_first s_others s_last ids }
    openNamespace(s, nsid, [], []) == (ids, [s_ns|s_others]),
    new s_first,
    s_first-Q->s_ns,
    s_first-P->s,
    extDeclListOk(s_first, decls) == s_last,
    new s_withns,
    s_withns-Q->s,
    s_withns-I->s_last,
    declareNamespace(s_withns, ids, [s_last|s_others]).

  namespaceOk(s, AnonymousNamespace([], decls)) = s_withns :- { s_first s_others s_last ids }
    new s_first,
    s_first-P->s,
    extDeclListOk(s_first, decls) == s_last,
    new s_withns,
    s_withns-Q->s,
    s_withns-U->s_last.

  namespaceOk(s, AnonymousNamespace([InlineModifier()], decls)) = s_withns :- { s_first s_others s_last ids }
    new s_first,
    s_first-P->s,
    extDeclListOk(s_first, decls) == s_last,
    new s_withns,
    s_withns-Q->s,
    s_withns-I->s_last.

  namespaceOk(s, NamespaceAlias(id, NamespaceID([], alias))) = s_withns :- {s_ns}
    resolveLocalNamespace(s, alias) == s_ns,
    new s_withns,
    s_withns-Q->s,
    declareLocalNamespace(s_withns, id, s_ns).

  namespaceOk(s, NamespaceAlias(id, nsid)) = s_withns :- {s_ns aliasid s_parent}
    resolveNamespace(s, nsid) == (s_parent, aliasid),
    resolveNestedLocalNamespace(s_parent, aliasid) == s_ns,
    new s_withns,
    s_withns-Q->s,
    declareLocalNamespace(s_withns, id, s_ns).

rules
  openNamespace : scope * NamespaceID * list(ID) * list(scope) -> (list(ID) * list(scope))
  openNamespace(s, NamespaceID([], id), ids, scopes) = ([id|ids], [s_ns|scopes]) :-
    openLocalNamespace(s, id) == s_ns.
  openNamespace(s, NamespaceID([Prefix([])], id), ids, scopes) = ([id|ids], [s_ns|scopes]) :-
    openLocalNamespace(s, id) == s_ns.
  openNamespace(s, NamespaceID([Prefix([h|t])], id), ids, scopes) = l :- {s_ns}
    openLocalNamespace(s, h) == s_ns,
    openNamespace(s_ns, NamespaceID([Prefix(t)], id), [h|ids], [s_ns|scopes]) == l.

  openLocalNamespace : scope * ID -> scope
  openLocalNamespace(s, id) = s_ns :- {ps}
    query Namespace
      filter (Q | I)* and { x :- x == id }
        min $ < Q and true
          in s |-> ps,
    resultToScope(id, ps) == s_ns.
  
  resultToScope : ID * list((path * (ID * scope))) -> scope
  resultToScope(id, []) = s :-
    new s,
    @id.decl := id.
  resultToScope(id, [(_, (id', s))|_]) = s :-
    @id.ref := id'.

  resolveNamespace : scope * NamespaceID -> (scope * ID)
  resolveNamespace(s, NamespaceID([], id)) = (s, id).
  resolveNamespace(s, NamespaceID([Prefix([])], id)) = (s, id).
  resolveNamespace(s, NamespaceID([Prefix([h|t])], id)) = (s_ns, id) :- { s_interm }
    resolveLocalNamespace(s, h) == s_interm,
    resolveNestedNamespace(s_interm, NamespaceID([Prefix(t)], id)) == (s_ns, id).

  resolveNestedNamespace : scope * NamespaceID -> (scope * ID)
  resolveNestedNamespace(s, NamespaceID([], id)) = (s, id).
  resolveNestedNamespace(s, NamespaceID([Prefix([])], id)) = (s, id).
  resolveNestedNamespace(s, NamespaceID([Prefix([h|t])], id)) = (s_ns, id) :- { s_interm }
    resolveNestedLocalNamespace(s, h) == s_interm,
    resolveNestedNamespace(s_interm, NamespaceID([Prefix(t)], id)) == (s_ns, id).

  
  resolveLocalNamespace : scope * ID -> scope
  resolveLocalNamespace(s, id) = s_ns :- {id'}
    @id.ref := id',
    query Namespace
      filter (P | Q | I)* (U | Q | I)* and { x :- x == id }
        min $ < U, U < I, I < Q, Q < P and true
          in s |-> [(_, (id', s_ns))|_] | error $[Namespace [id] does not exist]@id.
  
  resolveNestedLocalNamespace : scope * ID -> scope
  resolveNestedLocalNamespace(s, id) = s_ns :- {id'}
    @id.ref := id',
    query Namespace
      filter (U | Q | I)* and { x :- x == id }
        min $ < U, U < I, I < Q, Q < P and true
          in s |-> [(_, (id', s_ns))|_] | error $[Namespace [id] does not exist]@id.
  
  resolveTypeNamespace : scope * NamespaceTypeID -> (scope * TypeID)
  resolveTypeNamespace(s, NamespaceTypeID(p, id)) = resolveNamespace(s, NamespaceID(p, id)).

  declareNamespace : scope * list(ID) * list(scope)
  
  declareNamespace(s, [id|ids], [s_ns, s_prev|scopes]) :- {s_new}
  	new s_new,
  	s_new-Q->s_prev,
    declareLocalNamespace(s_new, id, s_ns),
    declareNamespace(s, ids, [s_new|scopes]).
  declareNamespace(s, [id], [s_ns]) :- {s_new}
  	declareLocalNamespace(s, id, s_ns).

  declareLocalNamespace : scope * ID * scope

  declareLocalNamespace(s, id, s_ns) :-
    !Namespace[id, s_ns] in s.

rules
  usingDeclOk : scope * UsingDeclaration -> scope
  
  usingDeclOk(s, UsingNamespace(NamespaceID([], id))) = s_new :- {s_parent s_ns}
    resolveLocalNamespace(s, id) == s_ns,
    new s_new,
    s_new-Q->s,
    s_new-U->s_ns.
  usingDeclOk(s, UsingNamespace(nsid)) = s_new :- {s_parent id s_ns}
    resolveNamespace(s, nsid) == (s_parent, id),
    resolveNestedLocalNamespace(s_parent, id) == s_ns,
    new s_new,
    s_new-Q->s,
    s_new-U->s_ns.

  usingDeclOk(s, Using(l)) = s_new :-
    new s_new,
    s_new-Q->s,
    usingListOk(s, s_new, l).

  usingOk : scope * scope * NamespaceVarOrTypeID
  usingListOk maps usingOk(*, *, list(*))
  usingOk(s, s_new, NamespaceID2NamespaceVarOrTypeID(nsid)) :- {T id}
    nsid == NamespaceID(_, id),
    typeOfVar(s, nsid) == T,
    declareVar(s_new, id, T),
    usingFunOk(s, s_new, nsid).
  usingOk(s, s_new, NamespaceTypeID2NamespaceVarOrTypeID(nsid)) :- {T id}
    nsid == NamespaceTypeID(_, id),
    typeOfTypedef(s, nsid) == T,
    declareTypedef(s_new, id, T).

  usingFunOk : scope * scope * NamespaceID
  usingFunOk(s, s_new, NamespaceID([], id)) :- {ps}
    query FunProto
      filter (P | Q | I | C | E)* (U | Q | I | C | E)* and { x :- x == id }
        min $ < U, U < I, I < Q, Q < P and true
          in s |-> ps,
    redeclareFun(s_new, id, ps).
  usingFunOk(s, s_new, nsid) :- {s_ns id ps}
    resolveNamespace(s, nsid) == (s_ns, id),
    query FunProto
      filter (U | Q | I | C | E)* and { x :- x == id }
        min $ < U, U < I, I < Q, Q < P and true
          in s_ns |-> ps,
    redeclareFun(s_new, id, ps).

  redeclareFun : scope * ID * list((path * (ID * TYPE)))
  redeclareFun(_, _, []).
  redeclareFun(s, id, [(_, (_, T))|_]) :-
    declareFunProto(s, id, T).