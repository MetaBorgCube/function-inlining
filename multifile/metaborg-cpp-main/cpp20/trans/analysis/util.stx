module analysis/util

imports
  signatures/c-syntax-sig
  
  analysis/types

signature

  rules
    length : list(Initializer) -> int
    length([]) = 0.
    length([t | ts]) = l :- {lt}
  	  lt == length(ts),
  	  l #= lt + 1.
  	  
  rules
    zippedFunTypes : list(ID) * list(TYPE) -> list((ID * TYPE))
    
    zippedFunTypes([], []) = [].
    
    zippedFunTypes([id|IDs], [t|Ts]) = [(id, t)|zippedFunTypes(IDs, Ts)].
    
    unzippedFunTypes : list((ID * TYPE)) -> (list(ID) * list(TYPE))
    
    unzippedFunTypes([]) = ([], []).
    
    unzippedFunTypes([(id, t)|Ts]) = unzipped :- { ids ts }
      unzippedFunTypes(Ts) == (ids, ts),
      ([id|ids], [t|ts]) == unzipped.