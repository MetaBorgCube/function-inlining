module analysis/classes

imports
  signatures/cpp20-sig
  analysis/declarations
  analysis/types
  analysis/expressions
  analysis/statements
  analysis/util

rules

  typeOfClassType : scope * ClassTypeSpecifier -> TYPE
  
  typeOfClassType(s, ClassType(classType, x, body)) = T@CLASS(classType, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat) :-
    new s_pri     , new s_pro     , new s_pub,
    new s_pri_stat, new s_pro_stat, new s_pub_stat,
    s_pri      -C-> s_pro,
    s_pro      -C-> s_pub,
    s_pri_stat -C-> s_pro_stat,
    s_pro_stat -C-> s_pub_stat,
    s_pri      -C-> s_pri_stat,
    s_pro      -C-> s_pro_stat,
    s_pub      -C-> s_pub_stat,
    s_pri      -P-> s,
    classBodyOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, classType, body),
    declareTypedef(s, x, T),
    declareTypedef(s_pub_stat, x, T),
    declareThis(s_pri, T).
    
  typeOfClassType(s, ClassTypeExtended(classType, x, extends, body)) = T@CLASS(classType, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat) :-
    new s_pri     , new s_pro     , new s_pub,
    new s_pri_stat, new s_pro_stat, new s_pub_stat,
    s_pri      -C-> s_pro,
    s_pro      -C-> s_pub,
    s_pri_stat -C-> s_pro_stat,
    s_pro_stat -C-> s_pub_stat,
    s_pri      -C-> s_pri_stat,
    s_pro      -C-> s_pro_stat,
    s_pub      -C-> s_pub_stat,
    s_pri      -P-> s,
    classBodyOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, classType, body),
    declareTypedef(s, x, T),
    declareTypedef(s_pub_stat, x, T),
    declareThis(s_pri, T),
    declareExtensions(s, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, extends).
    
  typeOfClassType(s, ClassTypeDecl(classType, x)) = T :-
    typeOfTypedef(s, x) == T@CLASS(classType, _, _, _, _, _, _).
    
rules

  classBodyOk : TypeID * scope * scope * scope * scope * scope * scope * ClassType * ClassBody
  
  classBodyOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, t, ClassBody(decls_defaults, decls)) :-
    classBodyDefaultDeclOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat,  t, decls_defaults),
    classBodyDeclsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, decls).
    
rules
  
  classBodyDefaultDeclOk : TypeID * scope * scope * scope * scope * scope * scope * ClassType * ClassBodyDeclarationDefault
  classBodyDefaultDeclsOk : TypeID * scope * scope * scope * scope * scope * scope * ClassType * list(ClassBodyDeclarator)
  
  classBodyDefaultDeclOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, t, ClassBodyDeclarationDefault(decls)) :-
    classBodyDefaultDeclsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, t, decls).
  
  classBodyDefaultDeclsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Class(), decls) :-
    classBodyDeclaratorsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Private(), decls).
  
  classBodyDefaultDeclsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Struct(), classBodyDefinitions) :-
    classBodyDeclaratorsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Public(), classBodyDefinitions).
  
rules

  classBodyDeclOk : TypeID * scope * scope * scope * scope * scope * scope * ClassBodyDeclaration
  classBodyDeclsOk maps classBodyDeclOk(*, *, *, *, *, *, *, list(*))
  
  classBodyDeclOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, ClassBodyDeclaration(visibility, declerators)) :-
    classBodyDeclaratorsOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, visibility, declerators).

rules

  classBodyDeclaratorOk : TypeID * scope * scope * scope * scope * scope * scope * VisibilityModifier * ClassBodyDeclarator
  classBodyDeclaratorsOk maps classBodyDeclaratorOk(*, *, *, *, *, *, *, *, list(*))
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Private(), Declaration2ClassBodyDeclarator(d)) :-
    classAttributeDecleratorOk(s_pri, s_pri_stat, d).
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Protected(), Declaration2ClassBodyDeclarator(d)) :-
    classAttributeDecleratorOk(s_pro, s_pro_stat, d).
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Public(), Declaration2ClassBodyDeclarator(d)) :-
    classAttributeDecleratorOk(s_pub, s_pub_stat, d).
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Private(), FunctionDefinition2ClassBodyDeclarator(f)) :-
    classFunctionDeclaratorOk(s_pri, s_pri_stat, s_pri, s_pri_stat, f).
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Protected(), FunctionDefinition2ClassBodyDeclarator(f)) :-
    classFunctionDeclaratorOk(s_pri, s_pri_stat, s_pro, s_pro_stat, f).
  
  classBodyDeclaratorOk(x, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, Public(), FunctionDefinition2ClassBodyDeclarator(f)) :-
    classFunctionDeclaratorOk(s_pri, s_pri_stat, s_pub, s_pub_stat, f).
    
rules
 
  classFunctionDeclaratorOk : scope * scope * scope * scope * FunctionDefinition
  
  classFunctionDeclaratorOk(s_class, s_class_stat, s_decl, s_decl_stat, f@FunDef(declSpecs, _, _, _)) :- {scs}
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    declareFunction(s_class, s_class_stat, s_decl, s_decl_stat, scs, f).
    
rules

  declareFunction : scope * scope * scope * scope * list(StorageClassSpecifier) * FunctionDefinition
  
  declareFunction(s_class, s_class_stat, s_decl, s_decl_stat, [], FunDef(declSpecs, Declarator(p, FunDeclTyped(IdDecl(x), ParamList(params))), decls, compStmt)) :- { retTu scs retT s_fun paramIDs paramTs type}
    declSpecsToType(s_decl, declSpecs) == retTu,
    typeOfPointer(p, retTu) == retT,
    new s_fun,
    s_fun -P-> s_class,
    !Return[retT] in s_fun,
    paramsOk(s_fun, params) == (paramIDs, paramTs),
    declsOk(s_fun, decls),
    compStmtOk(s_fun, compStmt),
    declareVars(s_fun, paramIDs, paramTs),
    FUN(zippedFunTypes(paramIDs, paramTs), unpackAutoType(retT)) == type,
    defineFun(s_decl, x, type),
    declareClassMember(s_decl, s_decl_stat, [], x, type).
    
  declareFunction(s_class, s_class_stat, s_decl, s_decl_stat, [], FunDef([], Declarator(p, FunDeclTyped(TypeIdDecl(classId), ParamList(params))), decls, compStmt)) :- {s_fun paramIDs paramTs type}
    new s_fun,
    s_fun -P-> s_class,
    paramsOk(s_fun, params) == (paramIDs, paramTs),
    declsOk(s_fun, decls),
    compStmtOk(s_fun, compStmt),
    declareVars(s_fun, paramIDs, paramTs),
    FUN(zippedFunTypes(paramIDs, paramTs), VOID()) == type,
    defineFun(s_decl, classId, type),
    declareClassMember(s_decl, s_decl_stat, [], classId, type).
    
  declareFunction(s_class, s_class_stat, s_decl, s_decl_stat, scs@[Static()], FunDef(declSpecs, Declarator(p, FunDeclTyped(IdDecl(x), ParamList(params))), decls, compStmt)) :- { retTu retT s_fun paramIDs paramTs type}
    declSpecsToType(s_decl, declSpecs) == retTu,
    typeOfPointer(p, retTu) == retT,
    new s_fun,
    s_fun -P-> s_class_stat,
    !Return[retT] in s_fun,
    paramsOk(s_fun, params) == (paramIDs, paramTs),
    declsOk(s_fun, decls),
    compStmtOk(s_fun, compStmt),
    declareVars(s_fun, paramIDs, paramTs),
    FUN(zippedFunTypes(paramIDs, paramTs), retT) == type,
    defineFun(s_decl_stat, x, type),
    declareClassMember(s_decl, s_decl_stat, scs, x, type).
  
rules

  classAttributeDecleratorOk : scope * scope * Declaration
  
  classAttributeDecleratorOk(s, s_stat, Decl(declSpecs, [i@Declarator2InitDeclarator(Declarator(p, FunDeclTyped(IdDecl(id), ParamList(params))))])) :- {retTu retT paramIDs paramIDVs paramTs paramTVs s_fun qRes scs}
    new s_fun,
    s_fun -P-> s,
    declSpecsToType(s, declSpecs) == retTu,
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    typeOfPointer(p, retTu) == retT,
    declareVars(s_fun, paramIDs, paramTs),
    paramsOk(s_fun, params) == (paramIDVs, paramTVs),
    foldVoidParam(paramIDVs, paramTVs) == (paramIDs, paramTs),
    declareFunProto(s, id, FUN(zippedFunTypes(paramIDs, paramTs), retT)),
    declareClassMember(s, s_stat, scs, id, FUN(zippedFunTypes(paramIDs, paramTs), retT)).
    
  classAttributeDecleratorOk(s, s_stat, Decl(declSpecs, [i@Declarator2InitDeclarator(Declarator(p, FunDeclTyped(IdDecl(id), ParamListVarArgs(params))))])) :- {retTu retT paramIDs paramIDVs paramTs paramTVs s_fun qRes scs}
    new s_fun,
    s_fun -P-> s,
    declSpecsToType(s, declSpecs) == retTu,
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    typeOfPointer(p, retTu) == retT,
    declareVars(s_fun, paramIDs, paramTs),
    paramsOk(s, params) == (paramIDVs, paramTVs),
    foldVoidParam(paramIDVs, paramTVs) == (paramIDs, paramTs),
    declareFunProto(s, id, VARFUN(zippedFunTypes(paramIDs, paramTs), retT)),
    declareClassMember(s, s_stat, scs, id, VARFUN(zippedFunTypes(paramIDs, paramTs), retT)).
    
  classAttributeDecleratorOk(s, s_stat, Decl([StorageClassSpecifier2DeclarationSpecifier(Typedef()), TypeSpecifier2DeclarationSpecifier(TypedefName1(NamespaceTypeID([], id))) | declSpecs], [])) :- {T}
    declSpecsToType(s, declSpecs) == T,
    declareTypedef(s, id, T),
    declareClassMember(s, s_stat, [], id, T).
    
  classAttributeDecleratorOk(s, s_stat,  Decl(declSpecs, [i@InitDecl(Declarator(p, ArrayDecl(IdDecl(_))), _)])) :- {id Tu T scs}
    declSpecsToType(s, declSpecs) == Tu,
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    typeOfPointer(p, Tu) == T,
    initDeclrtrOk(s, T, i) == id,
    declareVar(s, id, POINTER(T)),
    declareClassMember(s, s_stat, scs, id, POINTER(T)).
    
  classAttributeDecleratorOk(s, s_stat, Decl(declSpecs, [i@InitDecl(Declarator(p, ArrayDeclLength(IdDecl(_), _)), _)])) :- {id Tu T scs}
    declSpecsToType(s, declSpecs) == Tu,
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    typeOfPointer(p, Tu) == T,
    initDeclrtrOk(s, T, i) == id,
    declareVar(s, id, POINTER(T)),
    declareClassMember(s, s_stat, scs, id, POINTER(T)).
    
  classAttributeDecleratorOk(s, s_stat, Decl(declSpecs, declrtrs)) :- {Tu scs ids}
    declSpecsToType(s, declSpecs) == Tu,
    declSpecsToStorageClassSpecifiers(declSpecs) == scs,
    multiDeclOk(s, Tu, declrtrs) == ids,
    declareClassMembers(s, s_stat, scs, ids, Tu).
    
  // Typedefs, structs, unions, enums
  classAttributeDecleratorOk(s, s_stat, Decl(declSpecs, [])) :-
    declSpecsToType(s_stat, declSpecs) == _.

rules

  classConstructorOk : scope * scope * TypeID * TypeID * ParameterTypeList * CompoundStatement
  
  classConstructorOk(s_class, s_decl, x_class, x_constructor, ParamList(params), compStmt) :- { s_const paramIDs paramTs }
    x_class == x_constructor,
    new s_const,
    s_const -P-> s_class,
    paramsOk(s_const, params) == (paramIDs, paramTs),
    compStmtOk(s_const, compStmt),
    declareVars(s_const, paramIDs, paramTs),
    declareConstructor(s_decl, paramTs).
    
rules

  declareThis : scope * TYPE
  
  declareThis(s, T) :-
    !This[POINTER(T)] in s.

rules
          
  declareClassMember : scope * scope * list(StorageClassSpecifier) * ID * TYPE
  declareClassMembers maps declareClassMember(*, *, *, list(*), *)
  
  declareClassMember(s_decl, s_decl_stat, [], id_member, t) :- { T }
    !ClassMember[id_member, unpackAutoType(t)] in s_decl,
    query ClassMember
      filter C* and { x :- x == id_member }
        min $ < C and true
          in s_decl |-> [(_, (id_member, T))] | error $[Method [id_member] already defined].
          
  declareClassMember(s_decl, s_decl_stat, [Static()], id_member, t) :- { T }
    !ClassMember[id_member, t] in s_decl_stat,
    query ClassMember
      filter C* and { x :- x == id_member }
        min $ < C and true
          in s_decl |-> [(_, (id_member, T))] | error $[Method [id_member] already defined].

rules

  typeOfClassMember : scope * ID -> TYPE
  
  typeOfClassMember(s, id) = T :- { id' }
    @id.ref += id',
    @id.type += T,
    query ClassMember
      filter C* E* and { x :- x == id }
        min $ < C, $ < E, C < E and true
          in s |-> [(_, (id', T))|_] | error $[Class member [id] not defined in scope [s]].

rules
     
  declareConstructor : scope * list(TYPE)
  
  declareConstructor(s_decl, Ts) :- 
    !Constructor[Ts] in s_decl,
    query Constructor
      filter C* and { x :- x == Ts }
        min $ < C and true
          in s_decl |-> [(_, (Ts))] | error $[Constructor with signature [Ts] already defined].
          
rules
     
  typeOfConstructor : scope * TypeID * list(TYPE) -> TYPE
  constructorEmptyOk : list((path * list(TYPE)))
  
  typeOfConstructor(s, id, []) = T :- { s_pri s_pro s_pub ps }
    typeOfTypedef(s, NamespaceTypeID([], id)) == T@CLASS(_, s_pri, s_pro, s_pub, _, _, _),
    query Constructor
      filter E* and true
        min $ < E and true
          in s_pri |-> [],
    query Constructor
      filter E* and true
        min $ < E and true
          in s_pro |-> [],
    query Constructor
      filter E* and true
        min $ < E and true
          in s_pub |-> ps,
    constructorEmptyOk(ps) | error $[Empty constructor for class [id] is not defined].
  
  
  typeOfConstructor(s, id, Ts) = T :- { s_pri s_pro s_pub }
    typeOfTypedef(s, NamespaceTypeID([], id)) == T@CLASS(_, s_pri, s_pro, s_pub, _, _, _),
    query Constructor
      filter (C | E)* and { x :- x == Ts }
        min $ < C, $ < E, C < E and true
          in s_pub |-> [(_, Ts)|_] | error $[Constructor for class [id] and signature [Ts] is not defined].
          
  constructorEmptyOk([]).
  constructorEmptyOk([(_, [])]).
          
rules
   
  declareExtension : scope * scope * scope * scope * scope * scope * scope * ExtensionDeclaration 
  declareExtensions maps declareExtension(*, *, *, *, *, *, *, list(*))
  
  declareExtension(s, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, ExtensionDeclaration(Public(), x)) :- { t s_sup_pri s_sup_pro s_sup_pub s_sup_pri_stat s_sup_pro_stat s_sup_pub_stat }
    typeOfTypedef(s, x) == CLASS(t, s_sup_pri, s_sup_pro, s_sup_pub, s_sup_pri_stat, s_sup_pro_stat, s_sup_pub_stat),
    s_pub -E-> s_sup_pub, s_pro -E-> s_sup_pro,
    s_pub_stat -E-> s_sup_pub_stat, s_pro_stat -E-> s_sup_pro_stat.
    
  declareExtension(s, s_pri, s_pro, s_pub,s_pri_stat, s_pro_stat, s_pub_stat, ExtensionDeclaration(Protected(), x)) :- { t s_sup_pri s_sup_pro s_sup_pub s_sup_pri_stat s_sup_pro_stat s_sup_pub_stat }
    typeOfTypedef(s, x) == CLASS(t, s_sup_pri, s_sup_pro, s_sup_pub, s_sup_pri_stat, s_sup_pro_stat, s_sup_pub_stat),
    s_pro -E-> s_sup_pub, s_pro -E-> s_sup_pro,
    s_pro_stat -E-> s_sup_pub_stat, s_pro_stat -E-> s_sup_pro_stat.
    
  declareExtension(s, s_pri, s_pro, s_pub, s_pri_stat, s_pro_stat, s_pub_stat, ExtensionDeclaration(Private(), x)) :- { t s_sup_pri s_sup_pro s_sup_pub s_sup_pri_stat s_sup_pro_stat s_sup_pub_stat }
    typeOfTypedef(s, x) == CLASS(t, s_sup_pri, s_sup_pro, s_sup_pub, s_sup_pri_stat, s_sup_pro_stat, s_sup_pub_stat),
    s_pri -E-> s_sup_pub, s_pri -E-> s_sup_pro,
    s_pri_stat -E-> s_sup_pub_stat, s_pri_stat -E-> s_sup_pro_stat.
  
