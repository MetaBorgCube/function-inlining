module syntax/original-compiler-tests/definitions

language webdsl-statix

fixture [[
  application test_definitions

  [[...]]
]]

test ac import rules [[
  define foo(u:User, i : Int){

    apply ac rules bar(i)

    submit save("dfgdfg",User{}){"save"}
    action save(s:String, u2:User){
      var test := "" + (s.length() + i) + (u == u2);
    }
  }
]] parse succeeds

test global function def [[ cached function x(){} ]] parse succeeds

test global var def inferred init [[ var x := 12 ]] parse succeeds
test global var def init          [[ var x : Int := 12 ]] parse succeeds
test global var def               [[ var x :Int ]] parse succeeds

test request var inferred init  [[ request var fddf:=User{} ]] parse succeeds
test request var                [[ request var fddf: String ]] parse succeeds

test attributes [[
  attributes navigate {
    class = "btn btn-default"
    style = "display:inline;"
  }
]] parse succeeds

test override attributes [[
  override attributes navigate {
    class = "btn btn-default"
    style = "display:inline;"
  }
]] parse succeeds

test override more attributes [[
  override attributes navigate {
    class = "btn btn-default"
    input attributes ignore class style
    style = "display:inline;"
    foo = "bar"
  }
]] parse succeeds

test attributes colorsubmit [[
  attributes colorsubmit {
    class = "btn btn-default"
    ignore submit attributes

    class = "btn btn-default"
    style = "test"
    unknownattr attributes
    ignore foo attributes
  }
]] parse succeeds

test define inline body [[
  define inline body(){}
]] parse succeeds

test define page [[
  define page foo(){}
]] parse succeeds

test define page span [[
  define page span root(){
    action root(){
      return root();
    }
  }
]] parse succeeds

// why should render be allowed as template id?
test define page with all blocks [[
  define page span root(){
    action root(){
      return root();
    }
    databind{
      var s := "fdfd";
    }
    validate{
      var sf := "fdfd";
    }
    render{
      var sf := "fdfd";
    }
    render(6)
    render("45345"){"fgdg"}
  }
]] parse succeeds

test define page with vars [[
  define page span root(){
    request var a := "234234"
    var g := from TestEnt as x where s.confirmedTrack is null and s.confirmedTrack.track.master.showInitialTrackSelection
    var h := from TestEnt as x where x.derived is null
  }
]] parse succeeds

test define page with vars, comments and blocks [[
  define page root() {
    var s: String := "hoi2"
    //block[id := target] {}
    placeholder target {}
    form { action("do",do2())[ajax] }
    action do2 () {
      replace (target, templ(s));
      append  (target, templ(s));

      relocate (apage(s));

      visibility (target, hide);
      visibility (target, show);
      visibility (target, toggle);

      restyle (target, "aclass");
      clear (target); 
    }
  }
]] parse succeeds

test define page with var, render and output [[
  define page root() {
    var s: String := "hoi2"
    render{
      var i := 6;
      s := ""+6+i;
    }
    output(s)
  }
]] parse succeeds

test define override [[
  define override output(s:String) {
    output(s+"!")
  }
]] parse succeeds

test define ajax [[
  define ajax bla(){}
]] parse succeeds

test define ajax with button elements [[
  define ajax bla(){ 
    submit action{  runscript("alert('hi');"); } {"run" }
    submitlink action{  runscript("alert('hi');"); } {"run" }
  }
]] parse succeeds

test expand 1 [[
  expandtemplate pages to Ent {
    page ent(x:Ent){
      output(x)
    }
    page createEnt(){
      var tmp := Ent{}
      form{
        input(tmp)
        submit action{ tmp.save(); return ent(x); } { "save" }
      }
    }
  }
]] parse succeeds

test expand 2 [[
  expand Test to pages
]] parse succeeds

test expand 3 [[
  derive CRUD Test
]] parse succeeds

test expand 4 [[
  expandtemplate mult to first second third fourth {
    template first(){
      "first"
      "second"
      "third"
      var fourth := "fourth"
      output( fourth )
    }
  }
]] parse succeeds

test expand 5 [[
  expand testone 2 3 varname4 to mult
]] parse succeeds

test expand 6 [[
  page root {
    var list := [ expand foo bar y to x { "x" } ]
    var set  := { expand foo bar y to x { "x" } }
    div[ expand foo bar y to x { class = "x" } ]
    <div expand foo bar y to x { class = "x" } ></div>
  }
]] parse succeeds

test expand 7 [[
entity Foo {
  expand foo bar y to x {
    x: String
    xCache:String
  }
  function x(){
    expand foo bar y to x {
      log(x);
      log(xCache);
    }
  }
}
]] parse succeeds

test expand 8 [[
  expandtemplate x to y {
    entity Foo {
      expand foo bar y to x y z {
        xyz: String
        xyzCache:String
      }
    }

    expand 1 2 3 to bla

    expandtemplate bla to x y z {

    }
  }
]] parse succeeds

test expand 9 [[
  expandtemplate pages to Ent {
    page ent( x: Ent ){}
  }
]] parse succeeds

test page [[  page root(){"foo"}]] parse succeeds
test secure page [[  secure page root(){"foo"}]] parse succeeds
test template [[  template root(){"foo"}]] parse succeeds
test ajax template [[  ajax template foo(){"bar"}]] parse succeeds
test secure template [[  secure template root(){"foo"}]] parse succeeds
test ref arg [[  define bla(a: Ref<String>){ output(a + "!") }]] parse succeeds

test routing [[
  routing {
    receive (list : [String])  {
      var x := list[1];
      var args : List<String> := urlComponents();
      var conf := from ConferenceMapping where domain = x;
      return [page,conf.conference.id];
    }
    construct  (appurl : String, page : String, args : [String])  {
      return [appurl,page,args[0] ];
    }
  }
]] parse succeeds

test variable length template arg definition [[
  template tabs(title:String, selected: String, contents : [title:String, tabcontentelems: TemplateElements]) { }
]] parse succeeds

test variable length template arg implementation [[
  template tabs(title: String, selected: String, contents : [title: String, tabcontentelems: TemplateElements]) {
    output(title)
    for(c in contents){
      output(c.title)
      c.tabcontentelems 
    }
  }
]] parse succeeds

test type definition 1 [[
  type String { validate(this.length() <= 255 , "input too long (max 255 characters)") }
]] parse succeeds

test type definition 2 [[
  type String {
    validate(this.length() <= 255 , "input too long (max 255 characters)")
      lastIndexOf(Int) : Int
      static valueOf(Int):String
  }
]] parse succeeds

test type definition 3 [[
  type String {
    utils.StringType.splitWithSeparator as split(String)
  }
]] parse succeeds

test test block [[
  section foo
  test bar { assert(true); }
  test {assert(false); }
]] parse succeeds

test test definition [[
  test one {
    var d : WebDriver := HtmlUnitDriver();
    /*d.get(navigate(root()));
    log(d.getPageSource());
    var element : WebElement := d.findElement(By.name("q"));
    */
    d.get("http://www.google.com");
    log(d.getPageSource());
    var e : WebElement := d.findElement(By.name("q"));
    e.sendKeys("Cheese!");
    e.submit();
    log(d.getTitle());
  }
]] parse succeeds

test template definition 1 [[
  define bla(){
    var choice := ec_1
    var allChoices := from EffectChoice as ec
    var skillChoices := from EffectChoice as ec
  }
]] parse succeeds

test template definition 2 [[
  define test(){
    output([].length)
  }
]] parse succeeds

test template definition 3 [[
  define ignore-access-control page pagenotfound(){
    <h3>"404 Not Found"</h3>
  }
]] parse succeeds

test template definition 4 [[
  define test(){
    <script>
      registerOnload( function() { scalaEditor('~idAttr', ~readonly) } );
    </script>
    action save(){
      if( ideas != null ){}
    }

    <script>
      alert('~ph input');
    </script>

    <script>
      b < 10;
    </script>
  }
]] parse succeeds

test ac rule [[
  access control rules

    rule logsql { loggedIn && true }
]] parse succeeds