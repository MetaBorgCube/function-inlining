module syntax/access-control/misc

language webdsl-statix

fixture [[
  application access_control_misc

  [[...]]
]]


// access control policy
test access control policy [[
  access control policy p1
]] parse succeeds parse to ACPolicy(Name("p1"))

test access control policy AND [[
  access control policy p1 AND p2
]] parse succeeds parse to ACPolicy(PolicyAnd(Name("p1"), Name("p2")))

test access control policy OR [[
  access control policy p1 OR p2
]] parse succeeds parse to ACPolicy(PolicyOr(Name("p1"), Name("p2")))

test access control policy and left assoc [[
  access control policy p1 AND p2 AND p3
]] parse succeeds parse to ACPolicy(PolicyAnd(PolicyAnd(Name("p1"), Name("p2")), Name("p3")))

test access control policy OR left assoc [[
  access control policy p1 OR p2 OR p3
]] parse succeeds parse to ACPolicy(PolicyOr(PolicyOr(Name("p1"), Name("p2")), Name("p3")))

test access control policy priority 1 [[
  access control policy p1 AND p2 OR p3
]] parse succeeds parse to ACPolicy(PolicyOr(PolicyAnd(Name("p1"), Name("p2")), Name("p3")))

test access control policy priority 2 [[
  access control policy p1 OR p2 AND p3
]] parse succeeds parse to ACPolicy(PolicyOr(Name("p1"), PolicyAnd(Name("p2"), Name("p3"))))

// ignore access control modifier

test ignore ac mod page [[
  ignore-access-control page root { }
]] parse succeeds parse to TemplateDefinition(DefinePage([IgnoreAccessControl()], "root", OptFormalArgsNone(), OptTemplateArgsNone(), []))

test ignore ac mod template [[
  ignore-access-control template content { }
]] parse succeeds parse to TemplateDefinition(DefineTemplate([IgnoreAccessControl()], "content", OptFormalArgsNone(), OptTemplateArgsNone(), []))

// entity body declaration predicate
test entity predicate [[
  entity User {
    predicate isAdmin { true }
  }
]] parse succeeds parse to EntityNoSuper("User", [PredicateInEntity("isAdmin", OptFormalArgsNone(), True())])

test entity predicate single argument [[
  entity User {
    predicate isAdmin(u : User) { true }
  }
]] parse succeeds parse to EntityNoSuper("User", [PredicateInEntity("isAdmin", FormalArgs([Arg("u", SimpleSort("User"))]), True())])

test entity predicate multiple arguments [[
  entity User {
    predicate isAdmin(u : User, x : Int) { true }
  }
]] parse succeeds parse to EntityNoSuper("User", [PredicateInEntity("isAdmin", FormalArgs([Arg("u", SimpleSort("User")), Arg("x", SimpleSort("Int"))]), True())])

test entity predicate more than one exp [[
  entity User {
    predicate isAdmin { true false }
  }
]] parse fails

test entity predicate no exp [[
  entity User {
    predicate isAdmin {  }
  }
]] parse fails

test entity predicate nested exp [[
  entity User {
    predicate isAdmin { (1+2) == (2+1) }
  }
]] parse succeeds parse to EntityNoSuper("User", [PredicateInEntity("isAdmin", OptFormalArgsNone(), Eq(Add(Const(Int("1")), Const(Int("2"))), Add(Const(Int("2")), Const(Int("1")))))])
