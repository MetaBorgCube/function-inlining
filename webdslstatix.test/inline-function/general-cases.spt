module inline-function/general-cases

language webdsl-statix

test basic expression statement [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    [[increment(2)]];
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  x + 1; 
}
]]

test one statement two function calls inline right [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    increment(2) + [[increment(2)]];
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  increment(2) + (x + 1); 
}
]]

test one statement two function calls inline left [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    [[increment(2)]] + increment(2);
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  x + 1 + increment(2); 
}
]]

test two statements two function calls 1 [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    increment(2);
    [[increment(2)]];
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  increment(2);
  var x : Int := 2;
  x + 1; 
}
]]

test two statements two function calls 2 [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    [[increment(2)]];
    increment(2);
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  x + 1;
  increment(2);
}
]]

test basic variable declaration [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    var y : Int := [[increment(2)]];
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  var y : Int := x + 1; 
}
]]

test basic if statement [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    if ([[increment(2)]] == 3) { 1; } else { }
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int { 
  return x + 1; 
}

function main ( ) : Void { 
  var x : Int := 2;
  if ( x + 1 == 3 ) { 1; } else { } }
]]

test basic else if statement [[
built-in-library
section testing

function increment(x : Int) : Int {
    return x + 1;
}

function main() : Void {
    if (2 == 3) { } else if ([[increment(2)]] == 3) { 1; }
}
]] run inline-function-test(|#1) to [[
built-in-library
section testing

function increment ( x : Int ) : Int
{ return x + 1; }

function main ( ) : Void
{ if ( 2 == 3 ) { } 
  else { 
    var x : Int := 2;
    if ( x + 1 == 3 ) { 
      1; 
    } 
    else { } 
  } 
}
]]


