NamedFile(
  "inlinefunction/inlinefunction.cpp"
, TranslationUnit2Start(
    TranslationUnit(
      [ Declaration2ExternalDeclaration(
          Decl(
            [ TypeSpecifier2DeclarationSpecifier(
                ClassTypeSpecifier2TypeSpecifier(
                  ClassType(
                    Class()
                  , "MyClass"
                  , ClassBody(
                      ClassBodyDeclarationDefault([])
                    , [ ClassBodyDeclaration(
                          Private()
                        , [ Declaration2ClassBodyDeclarator(
                              Decl(
                                [TypeSpecifier2DeclarationSpecifier(Int())]
                              , [ InitDecl(
                                    Declarator(NoPointer(), IdDecl("x"))
                                  , AssignExp2Initializer(Exp2AssignExp(Constant2Exp(IntegerConstant2Constant(DecInt("5")))))
                                  )
                                ]
                              )
                            )
                          ]
                        )
                      , ClassBodyDeclaration(
                          Public()
                        , [ FunctionDefinition2ClassBodyDeclarator(
                              FunDef(
                                [TypeSpecifier2DeclarationSpecifier(Int())]
                              , Declarator(NoPointer(), FunDeclTyped(IdDecl("myfunc"), ParamList([])))
                              , []
                              , Compound(
                                  [Statement2BlockItem(Return(Exp2Exp-OPT(Var(NamespaceID([], "x")))))]
                                )
                              )
                            )
                          ]
                        )
                      ]
                    )
                  )
                )
              )
            ]
          , []
          )
        )
      , FunctionDefinition2ExternalDeclaration(
          FunDef(
            [TypeSpecifier2DeclarationSpecifier(Int())]
          , Declarator(
              NoPointer()
            , FunDeclTyped(
                IdDecl("increment")
              , ParamList(
                  [ParamDecl1([TypeSpecifier2DeclarationSpecifier(Int())], Declarator(NoPointer(), IdDecl("x")))]
                )
              )
            )
          , []
          , Compound(
              [Statement2BlockItem(Return(Exp2Exp-OPT(Constant2Exp(IntegerConstant2Constant(DecInt("1"))))))]
            )
          )
        )
      , FunctionDefinition2ExternalDeclaration(
          FunDef(
            [TypeSpecifier2DeclarationSpecifier(Int())]
          , Declarator(NoPointer(), FunDeclTyped(IdDecl("main"), ParamList([])))
          , []
          , Compound(
              [ Declaration2BlockItem(
                  Decl(
                    [TypeSpecifier2DeclarationSpecifier(Int())]
                  , [ InitDecl(
                        Declarator(NoPointer(), IdDecl("x"))
                      , AssignExp2Initializer(Exp2AssignExp(Constant2Exp(IntegerConstant2Constant(DecInt("5")))))
                      )
                    ]
                  )
                )
              , Statement2BlockItem(
                  CompoundStatement2Statement(
                    Compound(
                      [ Declaration2BlockItem(
                          Decl(
                            [TypeSpecifier2DeclarationSpecifier(Int())]
                          , [ InitDecl(
                                Declarator(NoPointer(), IdDecl("y"))
                              , AssignExp2Initializer(Exp2AssignExp(Constant2Exp(IntegerConstant2Constant(DecInt("6")))))
                              )
                            ]
                          )
                        )
                      , Statement2BlockItem(
                          Exp(
                            Call(
                              Var(NamespaceID([], "increment"))
                            , [Var(NamespaceID([], "x"))]
                            )
                          )
                        )
                      ]
                    )
                  )
                )
              ]
            )
          )
        )
      ]
    )
  )
)